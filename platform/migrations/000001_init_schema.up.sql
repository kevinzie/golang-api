-- Add UUID extension
CREATE
EXTENSION IF NOT EXISTS "uuid-ossp";

-- Set timezone
-- For more information, please visit:
-- https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
SET
TIMEZONE="Asia/Jakarta";

DO
$$
BEGIN
CREATE TYPE user_status AS ENUM ('active', 'disabled', 'inactive');
EXCEPTION
  WHEN duplicate_object THEN null;
END $$;

DO
$$
BEGIN
CREATE TYPE post_status AS ENUM ('publish', 'draft', 'revision', 'closed', 'private');
EXCEPTION
  WHEN duplicate_object THEN null;
END $$;
-- create table
create table users
(
    id                int                     GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name        VARCHAR(100) NOT NULL,
    last_name         VARCHAR(255)             DEFAULT NULL,
    email             VARCHAR(255) NOT NULL UNIQUE,
    email_verified_at timestamp                DEFAULT NULL,
    password          VARCHAR(255) NOT NULL,
    remember_token    VARCHAR(255)             DEFAULT NULL,
    activated         int                      DEFAULT 0,
    status            user_status  NOT NULL    DEFAULT 'inactive',
    signup_ip_address VARCHAR(255)             DEFAULT NULL,
    created_at        TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at      TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    deleted_at        TIMESTAMP WITH TIME ZONE DEFAULT NULL
);

create table roles
(
    id          INT GENERATED BY DEFAULT AS IDENTITY
        primary key,
    name        varchar(255)  not null,
    slug        varchar(255)  not null,
    description varchar(255) null,
    level       int default 1 not null,
    created_at  timestamp null,
    updated_at  timestamp null,
    deleted_at  timestamp null,
    constraint roles_slug_unique
        unique (slug)
);

create table role_user
(
    id         int  GENERATED BY DEFAULT AS IDENTITY
        primary key,
    role_id    int  not null,
    user_id    int  not null,
    created_at timestamp null,
    updated_at timestamp null,
    deleted_at timestamp null,
    constraint role_user_role_id_foreign
        foreign key (role_id) references roles (id)
            on delete cascade,
    constraint role_user_user_id_foreign
        foreign key (user_id) references users (id)
            on delete cascade
);

create table permissions
(
    id          int  GENERATED BY DEFAULT AS IDENTITY
        primary key,
    name        varchar(255) not null,
    slug        varchar(255) not null,
    description varchar(255) null,
    model       varchar(255) null,
    created_at  timestamp null,
    updated_at  timestamp null,
    deleted_at  timestamp null,
    constraint permissions_slug_unique
        unique (slug)
);

create table permission_user
(
    id            int  GENERATED BY DEFAULT AS IDENTITY
        primary key,
    permission_id int  not null,
    user_id       int  not null,
    created_at    timestamp null,
    updated_at    timestamp null,
    deleted_at    timestamp null,
    constraint permission_user_permission_id_foreign
        foreign key (permission_id) references permissions (id)
            on delete cascade,
    constraint permission_user_user_id_foreign
        foreign key (user_id) references users (id)
            on delete cascade
);

create table permission_role
(
    id            int  GENERATED BY DEFAULT AS IDENTITY
        primary key,
    permission_id int  not null,
    role_id       int  not null,
    created_at    timestamp null,
    updated_at    timestamp null,
    deleted_at    timestamp null,
    constraint permission_role_permission_id_foreign
        foreign key (permission_id) references permissions (id)
            on delete cascade,
    constraint permission_role_role_id_foreign
        foreign key (role_id) references roles (id)
            on delete cascade
);

create table options
(
    opt_id    int  GENERATED BY DEFAULT AS IDENTITY
        primary key,
    opt_name  varchar(191) default ''    not null,
    opt_value text                       not null,
    autoload  varchar(20)  default 'yes' not null,
    constraint opt_name
        unique (opt_name)
);

create index autoload
    on options (autoload);


-- Add indexes
CREATE INDEX IF NOT EXISTS active_user ON users(email) WHERE status = 'active';
CREATE INDEX IF NOT EXISTS disabled_user ON users(email) WHERE status = 'disabled';
CREATE INDEX IF NOT EXISTS deleted_user ON users(email) WHERE deleted_at != NULL;
create index permission_user_permission_id_index
    on permission_user (permission_id);

create index permission_user_user_id_index
    on permission_user (user_id);
create index permission_role_permission_id_index
    on permission_role (permission_id);

create index permission_role_role_id_index
    on permission_role (role_id);

create index role_user_role_id_index
    on role_user (role_id);

create index role_user_user_id_index
    on role_user (user_id);